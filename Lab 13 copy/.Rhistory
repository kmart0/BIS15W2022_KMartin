}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Wolves Population Composition"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("pop",
" Select Population of Interest:",
choices=unique(wolves$pop)),
selected = "AK.PEN"),
), # close the first box
box(title = "Wolf Population Composition", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$pop) %>%
ggplot(aes(x = input$pop, fill=sex)) +
geom_bar(position="dodge") +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Population")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(shiny)
library(shinydashboard)
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
files
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
campus_data <- lapply(files, read_csv)
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
files
campus_list <- lapply(files, read_csv)
campus_list <- lapply(files, readr::read_csv)
ucb <- readr::read_csv("data/uc_data/Berkeley.csv")
read_csv("data/uc_data/Berkeley.csv")
read_csv("data\\uc_data\\Berkeley.csv")
read_csv(files[[1]])
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
files
files %>% lapply(read_csv)
getwd()
setwd("~/GitHub/BIS15W2022_KMartin/Lab 13 copy")
campus_list <- lapply(files, read_csv)
getwd()
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
files
campus_list <- files %>%
lapply(read_csv)
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
files
files
class(files)
as.list(files)
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE) %>%
as.list()
files
#this is separated by campus so I think I want to join the data?
#but I need to load it first so I can look at it
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE) %>%
as.list()
files
campus_list <- files %>%
lapply(read_csv)
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
files
campus_list <- lapply(files, read_csv())
campus_list <- lapply(files, read_csv(col_names = T))
?lapply()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
library(ggthemes)
microreact<- read_csv("Data/microreact_isolates.csv")
microreact <- janitor::clean_names(microreact)
View(microreact)
microreact %>%
count(country, year)
case_counts <- microreact %>%
count(country, year)
case_counts %>%
ggplot(aes(x=country, y=n, color=fcz))+
geom_bar(position=dodge)+
facet_grid(~year)
case_counts %>%
ggplot(aes(x=country, y=n, color=fcz))+
geom_bar(position="dodge")+
facet_grid(~year)
case_counts %>%
ggplot(aes(x=country, y=n))+
geom_bar(position="dodge")+
facet_grid(~year)
case_counts %>%
ggplot(aes(x=country, y=n))+
geom_bar(position="dodge")+
View(case_counts)
campus_list <- lapply(files, read_csv)
gabon <- readr::read_csv("data/gabon_data/IvindoData_DryadVersion.csv")
gabon <- janitor::clean_names(gabon)
summary(gabon)
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=ra_apes, y=distance))+
geom_point()
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=ra_apes, y=distance))+
geom_point()+
theme_classic()
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=ra_apes, y=distance))+
geom_point()+
geom_smooth()+
theme_classic()
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=ra_apes, y=distance))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=ra_apes, y=distance))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=distance, y=ra_apes))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
names(gabon)
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=distance, y=ra_apes))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "1000px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=gabon, aes_string(x=distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
View(gabon)
#this is the basic form of plot I want to build:
gabon %>%
ggplot(aes(x=distance, y=ra_apes))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "1000px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=gabon, aes_string(x=distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "1000px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "1000px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 5,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "1000px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "700px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "650px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <-   dashboardPage(
dashboardHeader(title = "Relative Abundance of Species in Relation to Distance from Village"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Species", choices = c("ra_apes", "ra_birds", "ra_elephant", "ra_monkeys", "ra_rodent","ra_ungulate"),
selected = "ra_apes")
)), # close the first box
box(title = "Plot", width = 7,
plotOutput("plot", width = "620px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x=gabon$distance, y=input$y))+
geom_point()+
geom_smooth(method=lm)+
theme_classic()+
labs(x="Relative Abundance of Species",
y="Distance from Nearest Village (km)")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
source("~/.active-rstudio-document", echo=TRUE)
ucb <- readr::read_csv("data/uc_data/Berkeley.csv")
ucb <- readr::read_csv("data/uc_data/Berkeley.csv", col_names = T)
